// To create fat (uber) jar
plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 14
targetCompatibility = 14

mainClassName = "gin.LocalSearch"

repositories {
    mavenCentral()
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

dependencies {

    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'com.google.guava', name: 'guava', version: '28.2-jre'
    implementation group: 'junit', name: 'junit', version: '4.13'
    implementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    implementation group: 'com.github.javaparser', name: 'javaparser-core', version: '3.6.25'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation group: 'org.apache.commons', name: 'commons-rng-simple', version: '1.3'
    implementation group: 'org.apache.commons', name: 'commons-rng-core', version: '1.3'
    implementation group: 'org.apache.commons', name: 'commons-rng-client-api', version: '1.3'
    implementation group: 'org.apache.commons', name: 'commons-rng-sampling', version: '1.3'
    implementation group: 'com.opencsv', name: 'opencsv', version: '4.6'

    // https://mvnrepository.com/artifact/com.github.spullara.cli-parser/cli-parser
    implementation group: 'com.github.spullara.cli-parser', name: 'cli-parser', version: '1.1.5'

    // https://mvnrepository.com/artifact/org.tinylog/tinylog
    implementation group: 'org.tinylog', name: 'tinylog', version: '1.3.6'

    // Include the jar by "mvn package" on the fork of InMemoryCompiler created for gin.
    // This is a substitute for the following:
    // compile "org.mdkt.compiler:InMemoryJavaCompiler:1.3.0"
    // ... because InMemoryJavaCompiler has yet to incorporate the critical bugfix
    // ... and we then forked a second time to provide access to bytes of compiled code.
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Used to profile maven projects
    implementation group: 'org.apache.maven.shared', name: 'maven-invoker', version: '3.0.1'

    implementation group: 'org.apache.maven', name: 'maven-core', version: '3.6.3'

    // Used to profile gradle projects
    implementation group: 'org.gradle', name: 'gradle-tooling-api', version: '4.10.2'
    runtimeOnly 'org.slf4j:slf4j-simple:1.8.0-beta4'

    // Create jars for call graph generation using zta-zip
    implementation 'org.zeroturnaround:zt-zip:1.14'

    // Parse commandline
    implementation group: 'org.zeroturnaround', name: 'zt-exec', version: '1.11'

    // Parse build reports using jsoup
    implementation 'org.jsoup:jsoup:1.12.2'

    // build example project so main project unit tests (e.g. profiler) will pass!
    implementation project(':gradle-simple')
}

// This is handy to copy dependencies into a folder, for use in an IDE etc.
task copyToLib(type: Copy) {
    into "lib"
    from configurations.runtime
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

apply plugin: 'application'

mainClassName = 'gin.LocalSearch'

shadowJar {
    destinationDirectory = buildDir
    archiveBaseName = 'gin'
    classifier = null
    archiveVersion = null
}

test {
	jvmArgs = ["--add-opens", "java.base/java.lang.reflect=ALL-UNNAMED"] // this is needed to allow reflective access to java.lang.reflect.Executable in JUnitBridge.annotateTestWithTimeout() post Java 8 (https://github.com/gintool/gin/issues/29)

    //we want display the following test events
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
        //showStandardStreams = true
    }
}

// fix to allow main gin project in eclipse too
String prefix = projectDir.parentFile.name
allprojects { p ->
   apply plugin: 'eclipse' 
   eclipse.project.name = "${prefix}-${p.name}"
}